#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const _WCHAR_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 25;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __GLIBC_USE_LIB_EXT2: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::std::os::raw::c_uint = 0;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const __mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const WEOF: ::std::os::raw::c_uint = 4294967295;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const TCOD_HEXVERSION: ::std::os::raw::c_uint = 67075;
pub const TCOD_STRVERSION: &'static [u8; 6usize] = b"1.6.3\x00";
pub const TCOD_TECHVERSION: ::std::os::raw::c_uint = 17171200;
pub const TCOD_KEY_TEXT_SIZE: ::std::os::raw::c_uint = 32;
pub const TCOD_NOISE_MAX_OCTAVES: ::std::os::raw::c_uint = 128;
pub const TCOD_NOISE_MAX_DIMENSIONS: ::std::os::raw::c_uint = 4;
pub const TCOD_NOISE_DEFAULT_HURST: f64 = 0.5;
pub const TCOD_NOISE_DEFAULT_LACUNARITY: f64 = 2.;
pub const TCOD_LEX_FLAG_NOCASE: ::std::os::raw::c_uint = 1;
pub const TCOD_LEX_FLAG_NESTING_COMMENT: ::std::os::raw::c_uint = 2;
pub const TCOD_LEX_FLAG_TOKENIZE_COMMENTS: ::std::os::raw::c_uint = 4;
pub const TCOD_LEX_ERROR: ::std::os::raw::c_int = -1;
pub const TCOD_LEX_UNKNOWN: ::std::os::raw::c_uint = 0;
pub const TCOD_LEX_SYMBOL: ::std::os::raw::c_uint = 1;
pub const TCOD_LEX_KEYWORD: ::std::os::raw::c_uint = 2;
pub const TCOD_LEX_IDEN: ::std::os::raw::c_uint = 3;
pub const TCOD_LEX_STRING: ::std::os::raw::c_uint = 4;
pub const TCOD_LEX_INTEGER: ::std::os::raw::c_uint = 5;
pub const TCOD_LEX_FLOAT: ::std::os::raw::c_uint = 6;
pub const TCOD_LEX_CHAR: ::std::os::raw::c_uint = 7;
pub const TCOD_LEX_EOF: ::std::os::raw::c_uint = 8;
pub const TCOD_LEX_COMMENT: ::std::os::raw::c_uint = 9;
pub const TCOD_LEX_MAX_SYMBOLS: ::std::os::raw::c_uint = 100;
pub const TCOD_LEX_SYMBOL_SIZE: ::std::os::raw::c_uint = 5;
pub const TCOD_LEX_MAX_KEYWORDS: ::std::os::raw::c_uint = 100;
pub const TCOD_LEX_KEYWORD_SIZE: ::std::os::raw::c_uint = 20;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    _unused: [u8; 0],
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<::std::os::raw::c_uint>,
    pub __wchb: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub bindgen_union_field: u32,
}
impl Clone for __mbstate_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type mbstate_t = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wcscpy(__dest: *mut wchar_t, __src: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(__dest: *mut wchar_t, __src: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(__s1: *const wchar_t, __s2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(__s1: *const wchar_t, __s2: *const wchar_t, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const wchar_t, __s2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(__s1: *const wchar_t, __s2: *const wchar_t, __n: usize)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn wcscasecmp_l(__s1: *const wchar_t, __s2: *const wchar_t,
                        __loc: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(__s1: *const wchar_t, __s2: *const wchar_t,
                         __n: usize, __loc: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const wchar_t, __s2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize)
     -> usize;
}
extern "C" {
    pub fn wcscoll_l(__s1: *const wchar_t, __s2: *const wchar_t,
                     __loc: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize,
                     __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(__wcs: *const wchar_t, __wc: wchar_t)
     -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(__wcs: *const wchar_t, __reject: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const wchar_t, __accept: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const wchar_t, __accept: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(__haystack: *const wchar_t, __needle: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(__s: *mut wchar_t, __delim: *const wchar_t,
                  __ptr: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslen(__s: *const wchar_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsnlen(__s: *const wchar_t, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(__s: *const wchar_t, __c: wchar_t, __n: usize)
     -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(__s1: *const wchar_t, __s2: *const wchar_t, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wmemmove(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                   __n: usize, __p: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: wchar_t,
                   __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize,
                    __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize,
                  __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsrtowcs(__dst: *mut wchar_t,
                     __src: *mut *const ::std::os::raw::c_char, __len: usize,
                     __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcsrtombs(__dst: *mut ::std::os::raw::c_char,
                     __src: *mut *const wchar_t, __len: usize,
                     __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(__dst: *mut wchar_t,
                      __src: *mut *const ::std::os::raw::c_char, __nmc: usize,
                      __len: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(__dst: *mut ::std::os::raw::c_char,
                      __src: *mut *const wchar_t, __nwc: usize, __len: usize,
                      __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcstod(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t)
     -> f64;
}
extern "C" {
    pub fn wcstol(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t, __sizeloc: *mut usize)
     -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(__s: *mut wchar_t, __n: usize,
                    __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(__s: *mut __FILE, __format: *const wchar_t,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const wchar_t, __arg: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(__s: *mut wchar_t, __n: usize, __format: *const wchar_t,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const wchar_t, __format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_wscanf"]
    pub fn wscanf1(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_swscanf"]
    pub fn swscanf1(__s: *const wchar_t, __format: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(__s: *mut __FILE, __format: *const wchar_t,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const wchar_t, __arg: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(__s: *const wchar_t, __format: *const wchar_t,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfwscanf"]
    pub fn vfwscanf1(__s: *mut __FILE, __format: *const wchar_t,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const wchar_t, __arg: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vswscanf"]
    pub fn vswscanf1(__s: *const wchar_t, __format: *const wchar_t,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws(__ws: *mut wchar_t, __n: ::std::os::raw::c_int,
                  __stream: *mut __FILE) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(__ws: *const wchar_t, __stream: *mut __FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn wcsftime(__s: *mut wchar_t, __maxsize: usize,
                    __format: *const wchar_t, __tp: *const tm) -> usize;
}
pub type uint8 = ::std::os::raw::c_uchar;
pub type int8 = ::std::os::raw::c_char;
pub type uint16 = ::std::os::raw::c_ushort;
pub type int16 = ::std::os::raw::c_short;
pub type uint32 = ::std::os::raw::c_uint;
pub type int32 = ::std::os::raw::c_int;
pub type intptr = ::std::os::raw::c_long;
pub type uintptr = ::std::os::raw::c_ulong;
pub type bool_ = uint8;
extern "C" {
    pub fn TCOD_strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_strcasecmp(s1: *const ::std::os::raw::c_char,
                           s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_strncasecmp(s1: *const ::std::os::raw::c_char,
                            s2: *const ::std::os::raw::c_char, n: usize)
     -> ::std::os::raw::c_int;
}
pub type TCOD_list_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_list_new() -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_allocate(nb_elements: ::std::os::raw::c_int)
     -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_duplicate(l: TCOD_list_t) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_delete(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_push(l: TCOD_list_t, elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_pop(l: TCOD_list_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_peek(l: TCOD_list_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_add_all(l: TCOD_list_t, l2: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_get(l: TCOD_list_t, idx: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_set(l: TCOD_list_t, elt: *const ::std::os::raw::c_void,
                         idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_list_begin(l: TCOD_list_t)
     -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_end(l: TCOD_list_t) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_reverse(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_remove_iterator(l: TCOD_list_t,
                                     elt: *mut *mut ::std::os::raw::c_void)
     -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_remove(l: TCOD_list_t,
                            elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_remove_iterator_fast(l: TCOD_list_t,
                                          elt:
                                              *mut *mut ::std::os::raw::c_void)
     -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_remove_fast(l: TCOD_list_t,
                                 elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_contains(l: TCOD_list_t,
                              elt: *const ::std::os::raw::c_void) -> bool_;
}
extern "C" {
    pub fn TCOD_list_clear(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_clear_and_delete(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_size(l: TCOD_list_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_list_insert_before(l: TCOD_list_t,
                                   elt: *const ::std::os::raw::c_void,
                                   before: ::std::os::raw::c_int)
     -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_is_empty(l: TCOD_list_t) -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_color_t {
    pub r: uint8,
    pub g: uint8,
    pub b: uint8,
}
impl Clone for TCOD_color_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TCOD_color_RGB(r: uint8, g: uint8, b: uint8) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_HSV(h: f32, s: f32, v: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_equals(c1: TCOD_color_t, c2: TCOD_color_t) -> bool_;
}
extern "C" {
    pub fn TCOD_color_add(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_subtract(c1: TCOD_color_t, c2: TCOD_color_t)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_multiply(c1: TCOD_color_t, c2: TCOD_color_t)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_multiply_scalar(c1: TCOD_color_t, value: f32)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_lerp(c1: TCOD_color_t, c2: TCOD_color_t, coef: f32)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_set_HSV(c: *mut TCOD_color_t, h: f32, s: f32, v: f32);
}
extern "C" {
    pub fn TCOD_color_get_HSV(c: TCOD_color_t, h: *mut f32, s: *mut f32,
                              v: *mut f32);
}
extern "C" {
    pub fn TCOD_color_get_hue(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_hue(c: *mut TCOD_color_t, h: f32);
}
extern "C" {
    pub fn TCOD_color_get_saturation(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_saturation(c: *mut TCOD_color_t, s: f32);
}
extern "C" {
    pub fn TCOD_color_get_value(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_value(c: *mut TCOD_color_t, v: f32);
}
extern "C" {
    pub fn TCOD_color_shift_hue(c: *mut TCOD_color_t, hshift: f32);
}
extern "C" {
    pub fn TCOD_color_scale_HSV(c: *mut TCOD_color_t, scoef: f32, vcoef: f32);
}
extern "C" {
    pub fn TCOD_color_gen_map(map: *mut TCOD_color_t,
                              nb_key: ::std::os::raw::c_int,
                              key_color: *const TCOD_color_t,
                              key_index: *const ::std::os::raw::c_int);
}
pub const TCOD_COLOR_RED: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_RED;
pub const TCOD_COLOR_FLAME: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_FLAME;
pub const TCOD_COLOR_ORANGE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_ORANGE;
pub const TCOD_COLOR_AMBER: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_AMBER;
pub const TCOD_COLOR_YELLOW: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_YELLOW;
pub const TCOD_COLOR_LIME: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_LIME;
pub const TCOD_COLOR_CHARTREUSE: _bindgen_ty_1 =
    _bindgen_ty_1::TCOD_COLOR_CHARTREUSE;
pub const TCOD_COLOR_GREEN: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_GREEN;
pub const TCOD_COLOR_SEA: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_SEA;
pub const TCOD_COLOR_TURQUOISE: _bindgen_ty_1 =
    _bindgen_ty_1::TCOD_COLOR_TURQUOISE;
pub const TCOD_COLOR_CYAN: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_CYAN;
pub const TCOD_COLOR_SKY: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_SKY;
pub const TCOD_COLOR_AZURE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_AZURE;
pub const TCOD_COLOR_BLUE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_BLUE;
pub const TCOD_COLOR_HAN: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_HAN;
pub const TCOD_COLOR_VIOLET: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_VIOLET;
pub const TCOD_COLOR_PURPLE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_PURPLE;
pub const TCOD_COLOR_FUCHSIA: _bindgen_ty_1 =
    _bindgen_ty_1::TCOD_COLOR_FUCHSIA;
pub const TCOD_COLOR_MAGENTA: _bindgen_ty_1 =
    _bindgen_ty_1::TCOD_COLOR_MAGENTA;
pub const TCOD_COLOR_PINK: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_PINK;
pub const TCOD_COLOR_CRIMSON: _bindgen_ty_1 =
    _bindgen_ty_1::TCOD_COLOR_CRIMSON;
pub const TCOD_COLOR_NB: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_NB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    TCOD_COLOR_RED = 0,
    TCOD_COLOR_FLAME = 1,
    TCOD_COLOR_ORANGE = 2,
    TCOD_COLOR_AMBER = 3,
    TCOD_COLOR_YELLOW = 4,
    TCOD_COLOR_LIME = 5,
    TCOD_COLOR_CHARTREUSE = 6,
    TCOD_COLOR_GREEN = 7,
    TCOD_COLOR_SEA = 8,
    TCOD_COLOR_TURQUOISE = 9,
    TCOD_COLOR_CYAN = 10,
    TCOD_COLOR_SKY = 11,
    TCOD_COLOR_AZURE = 12,
    TCOD_COLOR_BLUE = 13,
    TCOD_COLOR_HAN = 14,
    TCOD_COLOR_VIOLET = 15,
    TCOD_COLOR_PURPLE = 16,
    TCOD_COLOR_FUCHSIA = 17,
    TCOD_COLOR_MAGENTA = 18,
    TCOD_COLOR_PINK = 19,
    TCOD_COLOR_CRIMSON = 20,
    TCOD_COLOR_NB = 21,
}
pub const TCOD_COLOR_DESATURATED: _bindgen_ty_2 =
    _bindgen_ty_2::TCOD_COLOR_DESATURATED;
pub const TCOD_COLOR_LIGHTEST: _bindgen_ty_2 =
    _bindgen_ty_2::TCOD_COLOR_LIGHTEST;
pub const TCOD_COLOR_LIGHTER: _bindgen_ty_2 =
    _bindgen_ty_2::TCOD_COLOR_LIGHTER;
pub const TCOD_COLOR_LIGHT: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_LIGHT;
pub const TCOD_COLOR_NORMAL: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_NORMAL;
pub const TCOD_COLOR_DARK: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_DARK;
pub const TCOD_COLOR_DARKER: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_DARKER;
pub const TCOD_COLOR_DARKEST: _bindgen_ty_2 =
    _bindgen_ty_2::TCOD_COLOR_DARKEST;
pub const TCOD_COLOR_LEVELS: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_LEVELS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    TCOD_COLOR_DESATURATED = 0,
    TCOD_COLOR_LIGHTEST = 1,
    TCOD_COLOR_LIGHTER = 2,
    TCOD_COLOR_LIGHT = 3,
    TCOD_COLOR_NORMAL = 4,
    TCOD_COLOR_DARK = 5,
    TCOD_COLOR_DARKER = 6,
    TCOD_COLOR_DARKEST = 7,
    TCOD_COLOR_LEVELS = 8,
}
extern "C" {
    #[link_name = "TCOD_colors"]
    pub static mut TCOD_colors: [[TCOD_color_t; 8usize]; 21usize];
}
extern "C" {
    #[link_name = "TCOD_black"]
    pub static TCOD_black: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_grey"]
    pub static TCOD_darkest_grey: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_grey"]
    pub static TCOD_darker_grey: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_grey"]
    pub static TCOD_dark_grey: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_grey"]
    pub static TCOD_grey: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_grey"]
    pub static TCOD_light_grey: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_grey"]
    pub static TCOD_lighter_grey: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_grey"]
    pub static TCOD_lightest_grey: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_gray"]
    pub static TCOD_darkest_gray: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_gray"]
    pub static TCOD_darker_gray: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_gray"]
    pub static TCOD_dark_gray: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_gray"]
    pub static TCOD_gray: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_gray"]
    pub static TCOD_light_gray: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_gray"]
    pub static TCOD_lighter_gray: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_gray"]
    pub static TCOD_lightest_gray: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_white"]
    pub static TCOD_white: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_sepia"]
    pub static TCOD_darkest_sepia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_sepia"]
    pub static TCOD_darker_sepia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_sepia"]
    pub static TCOD_dark_sepia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_sepia"]
    pub static TCOD_sepia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_sepia"]
    pub static TCOD_light_sepia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_sepia"]
    pub static TCOD_lighter_sepia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_sepia"]
    pub static TCOD_lightest_sepia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_red"]
    pub static TCOD_red: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_flame"]
    pub static TCOD_flame: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_orange"]
    pub static TCOD_orange: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_amber"]
    pub static TCOD_amber: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_yellow"]
    pub static TCOD_yellow: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lime"]
    pub static TCOD_lime: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_chartreuse"]
    pub static TCOD_chartreuse: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_green"]
    pub static TCOD_green: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_sea"]
    pub static TCOD_sea: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_turquoise"]
    pub static TCOD_turquoise: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_cyan"]
    pub static TCOD_cyan: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_sky"]
    pub static TCOD_sky: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_azure"]
    pub static TCOD_azure: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_blue"]
    pub static TCOD_blue: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_han"]
    pub static TCOD_han: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_violet"]
    pub static TCOD_violet: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_purple"]
    pub static TCOD_purple: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_fuchsia"]
    pub static TCOD_fuchsia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_magenta"]
    pub static TCOD_magenta: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_pink"]
    pub static TCOD_pink: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_crimson"]
    pub static TCOD_crimson: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_red"]
    pub static TCOD_dark_red: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_flame"]
    pub static TCOD_dark_flame: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_orange"]
    pub static TCOD_dark_orange: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_amber"]
    pub static TCOD_dark_amber: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_yellow"]
    pub static TCOD_dark_yellow: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_lime"]
    pub static TCOD_dark_lime: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_chartreuse"]
    pub static TCOD_dark_chartreuse: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_green"]
    pub static TCOD_dark_green: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_sea"]
    pub static TCOD_dark_sea: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_turquoise"]
    pub static TCOD_dark_turquoise: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_cyan"]
    pub static TCOD_dark_cyan: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_sky"]
    pub static TCOD_dark_sky: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_azure"]
    pub static TCOD_dark_azure: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_blue"]
    pub static TCOD_dark_blue: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_han"]
    pub static TCOD_dark_han: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_violet"]
    pub static TCOD_dark_violet: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_purple"]
    pub static TCOD_dark_purple: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_fuchsia"]
    pub static TCOD_dark_fuchsia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_magenta"]
    pub static TCOD_dark_magenta: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_pink"]
    pub static TCOD_dark_pink: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_dark_crimson"]
    pub static TCOD_dark_crimson: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_red"]
    pub static TCOD_darker_red: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_flame"]
    pub static TCOD_darker_flame: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_orange"]
    pub static TCOD_darker_orange: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_amber"]
    pub static TCOD_darker_amber: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_yellow"]
    pub static TCOD_darker_yellow: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_lime"]
    pub static TCOD_darker_lime: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_chartreuse"]
    pub static TCOD_darker_chartreuse: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_green"]
    pub static TCOD_darker_green: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_sea"]
    pub static TCOD_darker_sea: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_turquoise"]
    pub static TCOD_darker_turquoise: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_cyan"]
    pub static TCOD_darker_cyan: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_sky"]
    pub static TCOD_darker_sky: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_azure"]
    pub static TCOD_darker_azure: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_blue"]
    pub static TCOD_darker_blue: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_han"]
    pub static TCOD_darker_han: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_violet"]
    pub static TCOD_darker_violet: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_purple"]
    pub static TCOD_darker_purple: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_fuchsia"]
    pub static TCOD_darker_fuchsia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_magenta"]
    pub static TCOD_darker_magenta: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_pink"]
    pub static TCOD_darker_pink: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darker_crimson"]
    pub static TCOD_darker_crimson: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_red"]
    pub static TCOD_darkest_red: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_flame"]
    pub static TCOD_darkest_flame: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_orange"]
    pub static TCOD_darkest_orange: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_amber"]
    pub static TCOD_darkest_amber: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_yellow"]
    pub static TCOD_darkest_yellow: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_lime"]
    pub static TCOD_darkest_lime: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_chartreuse"]
    pub static TCOD_darkest_chartreuse: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_green"]
    pub static TCOD_darkest_green: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_sea"]
    pub static TCOD_darkest_sea: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_turquoise"]
    pub static TCOD_darkest_turquoise: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_cyan"]
    pub static TCOD_darkest_cyan: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_sky"]
    pub static TCOD_darkest_sky: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_azure"]
    pub static TCOD_darkest_azure: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_blue"]
    pub static TCOD_darkest_blue: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_han"]
    pub static TCOD_darkest_han: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_violet"]
    pub static TCOD_darkest_violet: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_purple"]
    pub static TCOD_darkest_purple: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_fuchsia"]
    pub static TCOD_darkest_fuchsia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_magenta"]
    pub static TCOD_darkest_magenta: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_pink"]
    pub static TCOD_darkest_pink: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_darkest_crimson"]
    pub static TCOD_darkest_crimson: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_red"]
    pub static TCOD_light_red: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_flame"]
    pub static TCOD_light_flame: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_orange"]
    pub static TCOD_light_orange: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_amber"]
    pub static TCOD_light_amber: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_yellow"]
    pub static TCOD_light_yellow: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_lime"]
    pub static TCOD_light_lime: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_chartreuse"]
    pub static TCOD_light_chartreuse: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_green"]
    pub static TCOD_light_green: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_sea"]
    pub static TCOD_light_sea: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_turquoise"]
    pub static TCOD_light_turquoise: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_cyan"]
    pub static TCOD_light_cyan: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_sky"]
    pub static TCOD_light_sky: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_azure"]
    pub static TCOD_light_azure: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_blue"]
    pub static TCOD_light_blue: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_han"]
    pub static TCOD_light_han: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_violet"]
    pub static TCOD_light_violet: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_purple"]
    pub static TCOD_light_purple: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_fuchsia"]
    pub static TCOD_light_fuchsia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_magenta"]
    pub static TCOD_light_magenta: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_pink"]
    pub static TCOD_light_pink: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_light_crimson"]
    pub static TCOD_light_crimson: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_red"]
    pub static TCOD_lighter_red: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_flame"]
    pub static TCOD_lighter_flame: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_orange"]
    pub static TCOD_lighter_orange: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_amber"]
    pub static TCOD_lighter_amber: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_yellow"]
    pub static TCOD_lighter_yellow: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_lime"]
    pub static TCOD_lighter_lime: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_chartreuse"]
    pub static TCOD_lighter_chartreuse: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_green"]
    pub static TCOD_lighter_green: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_sea"]
    pub static TCOD_lighter_sea: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_turquoise"]
    pub static TCOD_lighter_turquoise: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_cyan"]
    pub static TCOD_lighter_cyan: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_sky"]
    pub static TCOD_lighter_sky: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_azure"]
    pub static TCOD_lighter_azure: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_blue"]
    pub static TCOD_lighter_blue: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_han"]
    pub static TCOD_lighter_han: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_violet"]
    pub static TCOD_lighter_violet: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_purple"]
    pub static TCOD_lighter_purple: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_fuchsia"]
    pub static TCOD_lighter_fuchsia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_magenta"]
    pub static TCOD_lighter_magenta: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_pink"]
    pub static TCOD_lighter_pink: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lighter_crimson"]
    pub static TCOD_lighter_crimson: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_red"]
    pub static TCOD_lightest_red: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_flame"]
    pub static TCOD_lightest_flame: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_orange"]
    pub static TCOD_lightest_orange: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_amber"]
    pub static TCOD_lightest_amber: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_yellow"]
    pub static TCOD_lightest_yellow: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_lime"]
    pub static TCOD_lightest_lime: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_chartreuse"]
    pub static TCOD_lightest_chartreuse: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_green"]
    pub static TCOD_lightest_green: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_sea"]
    pub static TCOD_lightest_sea: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_turquoise"]
    pub static TCOD_lightest_turquoise: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_cyan"]
    pub static TCOD_lightest_cyan: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_sky"]
    pub static TCOD_lightest_sky: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_azure"]
    pub static TCOD_lightest_azure: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_blue"]
    pub static TCOD_lightest_blue: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_han"]
    pub static TCOD_lightest_han: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_violet"]
    pub static TCOD_lightest_violet: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_purple"]
    pub static TCOD_lightest_purple: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_fuchsia"]
    pub static TCOD_lightest_fuchsia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_magenta"]
    pub static TCOD_lightest_magenta: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_pink"]
    pub static TCOD_lightest_pink: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_lightest_crimson"]
    pub static TCOD_lightest_crimson: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_red"]
    pub static TCOD_desaturated_red: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_flame"]
    pub static TCOD_desaturated_flame: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_orange"]
    pub static TCOD_desaturated_orange: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_amber"]
    pub static TCOD_desaturated_amber: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_yellow"]
    pub static TCOD_desaturated_yellow: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_lime"]
    pub static TCOD_desaturated_lime: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_chartreuse"]
    pub static TCOD_desaturated_chartreuse: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_green"]
    pub static TCOD_desaturated_green: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_sea"]
    pub static TCOD_desaturated_sea: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_turquoise"]
    pub static TCOD_desaturated_turquoise: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_cyan"]
    pub static TCOD_desaturated_cyan: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_sky"]
    pub static TCOD_desaturated_sky: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_azure"]
    pub static TCOD_desaturated_azure: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_blue"]
    pub static TCOD_desaturated_blue: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_han"]
    pub static TCOD_desaturated_han: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_violet"]
    pub static TCOD_desaturated_violet: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_purple"]
    pub static TCOD_desaturated_purple: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_fuchsia"]
    pub static TCOD_desaturated_fuchsia: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_magenta"]
    pub static TCOD_desaturated_magenta: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_pink"]
    pub static TCOD_desaturated_pink: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_desaturated_crimson"]
    pub static TCOD_desaturated_crimson: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_brass"]
    pub static TCOD_brass: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_copper"]
    pub static TCOD_copper: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_gold"]
    pub static TCOD_gold: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_silver"]
    pub static TCOD_silver: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_celadon"]
    pub static TCOD_celadon: TCOD_color_t;
}
extern "C" {
    #[link_name = "TCOD_peach"]
    pub static TCOD_peach: TCOD_color_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_keycode_t {
    TCODK_NONE = 0,
    TCODK_ESCAPE = 1,
    TCODK_BACKSPACE = 2,
    TCODK_TAB = 3,
    TCODK_ENTER = 4,
    TCODK_SHIFT = 5,
    TCODK_CONTROL = 6,
    TCODK_ALT = 7,
    TCODK_PAUSE = 8,
    TCODK_CAPSLOCK = 9,
    TCODK_PAGEUP = 10,
    TCODK_PAGEDOWN = 11,
    TCODK_END = 12,
    TCODK_HOME = 13,
    TCODK_UP = 14,
    TCODK_LEFT = 15,
    TCODK_RIGHT = 16,
    TCODK_DOWN = 17,
    TCODK_PRINTSCREEN = 18,
    TCODK_INSERT = 19,
    TCODK_DELETE = 20,
    TCODK_LWIN = 21,
    TCODK_RWIN = 22,
    TCODK_APPS = 23,
    TCODK_0 = 24,
    TCODK_1 = 25,
    TCODK_2 = 26,
    TCODK_3 = 27,
    TCODK_4 = 28,
    TCODK_5 = 29,
    TCODK_6 = 30,
    TCODK_7 = 31,
    TCODK_8 = 32,
    TCODK_9 = 33,
    TCODK_KP0 = 34,
    TCODK_KP1 = 35,
    TCODK_KP2 = 36,
    TCODK_KP3 = 37,
    TCODK_KP4 = 38,
    TCODK_KP5 = 39,
    TCODK_KP6 = 40,
    TCODK_KP7 = 41,
    TCODK_KP8 = 42,
    TCODK_KP9 = 43,
    TCODK_KPADD = 44,
    TCODK_KPSUB = 45,
    TCODK_KPDIV = 46,
    TCODK_KPMUL = 47,
    TCODK_KPDEC = 48,
    TCODK_KPENTER = 49,
    TCODK_F1 = 50,
    TCODK_F2 = 51,
    TCODK_F3 = 52,
    TCODK_F4 = 53,
    TCODK_F5 = 54,
    TCODK_F6 = 55,
    TCODK_F7 = 56,
    TCODK_F8 = 57,
    TCODK_F9 = 58,
    TCODK_F10 = 59,
    TCODK_F11 = 60,
    TCODK_F12 = 61,
    TCODK_NUMLOCK = 62,
    TCODK_SCROLLLOCK = 63,
    TCODK_SPACE = 64,
    TCODK_CHAR = 65,
    TCODK_TEXT = 66,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_key_t {
    pub vk: TCOD_keycode_t,
    pub c: ::std::os::raw::c_char,
    pub text: [::std::os::raw::c_char; 32usize],
    pub pressed: bool_,
    pub lalt: bool_,
    pub lctrl: bool_,
    pub lmeta: bool_,
    pub ralt: bool_,
    pub rctrl: bool_,
    pub rmeta: bool_,
    pub shift: bool_,
}
impl Clone for TCOD_key_t {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_chars_t {
    TCOD_CHAR_HLINE = 196,
    TCOD_CHAR_VLINE = 179,
    TCOD_CHAR_NE = 191,
    TCOD_CHAR_NW = 218,
    TCOD_CHAR_SE = 217,
    TCOD_CHAR_SW = 192,
    TCOD_CHAR_TEEW = 180,
    TCOD_CHAR_TEEE = 195,
    TCOD_CHAR_TEEN = 193,
    TCOD_CHAR_TEES = 194,
    TCOD_CHAR_CROSS = 197,
    TCOD_CHAR_DHLINE = 205,
    TCOD_CHAR_DVLINE = 186,
    TCOD_CHAR_DNE = 187,
    TCOD_CHAR_DNW = 201,
    TCOD_CHAR_DSE = 188,
    TCOD_CHAR_DSW = 200,
    TCOD_CHAR_DTEEW = 185,
    TCOD_CHAR_DTEEE = 204,
    TCOD_CHAR_DTEEN = 202,
    TCOD_CHAR_DTEES = 203,
    TCOD_CHAR_DCROSS = 206,
    TCOD_CHAR_BLOCK1 = 176,
    TCOD_CHAR_BLOCK2 = 177,
    TCOD_CHAR_BLOCK3 = 178,
    TCOD_CHAR_ARROW_N = 24,
    TCOD_CHAR_ARROW_S = 25,
    TCOD_CHAR_ARROW_E = 26,
    TCOD_CHAR_ARROW_W = 27,
    TCOD_CHAR_ARROW2_N = 30,
    TCOD_CHAR_ARROW2_S = 31,
    TCOD_CHAR_ARROW2_E = 16,
    TCOD_CHAR_ARROW2_W = 17,
    TCOD_CHAR_DARROW_H = 29,
    TCOD_CHAR_DARROW_V = 18,
    TCOD_CHAR_CHECKBOX_UNSET = 224,
    TCOD_CHAR_CHECKBOX_SET = 225,
    TCOD_CHAR_RADIO_UNSET = 9,
    TCOD_CHAR_RADIO_SET = 10,
    TCOD_CHAR_SUBP_NW = 226,
    TCOD_CHAR_SUBP_NE = 227,
    TCOD_CHAR_SUBP_N = 228,
    TCOD_CHAR_SUBP_SE = 229,
    TCOD_CHAR_SUBP_DIAG = 230,
    TCOD_CHAR_SUBP_E = 231,
    TCOD_CHAR_SUBP_SW = 232,
    TCOD_CHAR_SMILIE = 1,
    TCOD_CHAR_SMILIE_INV = 2,
    TCOD_CHAR_HEART = 3,
    TCOD_CHAR_DIAMOND = 4,
    TCOD_CHAR_CLUB = 5,
    TCOD_CHAR_SPADE = 6,
    TCOD_CHAR_BULLET = 7,
    TCOD_CHAR_BULLET_INV = 8,
    TCOD_CHAR_MALE = 11,
    TCOD_CHAR_FEMALE = 12,
    TCOD_CHAR_NOTE = 13,
    TCOD_CHAR_NOTE_DOUBLE = 14,
    TCOD_CHAR_LIGHT = 15,
    TCOD_CHAR_EXCLAM_DOUBLE = 19,
    TCOD_CHAR_PILCROW = 20,
    TCOD_CHAR_SECTION = 21,
    TCOD_CHAR_POUND = 156,
    TCOD_CHAR_MULTIPLICATION = 158,
    TCOD_CHAR_FUNCTION = 159,
    TCOD_CHAR_RESERVED = 169,
    TCOD_CHAR_HALF = 171,
    TCOD_CHAR_ONE_QUARTER = 172,
    TCOD_CHAR_COPYRIGHT = 184,
    TCOD_CHAR_CENT = 189,
    TCOD_CHAR_YEN = 190,
    TCOD_CHAR_CURRENCY = 207,
    TCOD_CHAR_THREE_QUARTERS = 243,
    TCOD_CHAR_DIVISION = 246,
    TCOD_CHAR_GRADE = 248,
    TCOD_CHAR_UMLAUT = 249,
    TCOD_CHAR_POW1 = 251,
    TCOD_CHAR_POW3 = 252,
    TCOD_CHAR_POW2 = 253,
    TCOD_CHAR_BULLET_SQUARE = 254,
}
pub const TCOD_COLCTRL_NUMBER: TCOD_colctrl_t =
    TCOD_colctrl_t::TCOD_COLCTRL_5;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_colctrl_t {
    TCOD_COLCTRL_1 = 1,
    TCOD_COLCTRL_2 = 2,
    TCOD_COLCTRL_3 = 3,
    TCOD_COLCTRL_4 = 4,
    TCOD_COLCTRL_5 = 5,
    TCOD_COLCTRL_FORE_RGB = 6,
    TCOD_COLCTRL_BACK_RGB = 7,
    TCOD_COLCTRL_STOP = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_bkgnd_flag_t {
    TCOD_BKGND_NONE = 0,
    TCOD_BKGND_SET = 1,
    TCOD_BKGND_MULTIPLY = 2,
    TCOD_BKGND_LIGHTEN = 3,
    TCOD_BKGND_DARKEN = 4,
    TCOD_BKGND_SCREEN = 5,
    TCOD_BKGND_COLOR_DODGE = 6,
    TCOD_BKGND_COLOR_BURN = 7,
    TCOD_BKGND_ADD = 8,
    TCOD_BKGND_ADDA = 9,
    TCOD_BKGND_BURN = 10,
    TCOD_BKGND_OVERLAY = 11,
    TCOD_BKGND_ALPH = 12,
    TCOD_BKGND_DEFAULT = 13,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_key_status_t { TCOD_KEY_PRESSED = 1, TCOD_KEY_RELEASED = 2, }
pub const TCOD_FONT_TYPE_GRAYSCALE: TCOD_font_flags_t =
    TCOD_font_flags_t::TCOD_FONT_TYPE_GREYSCALE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_font_flags_t {
    TCOD_FONT_LAYOUT_ASCII_INCOL = 1,
    TCOD_FONT_LAYOUT_ASCII_INROW = 2,
    TCOD_FONT_TYPE_GREYSCALE = 4,
    TCOD_FONT_LAYOUT_TCOD = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_renderer_t {
    TCOD_RENDERER_GLSL = 0,
    TCOD_RENDERER_OPENGL = 1,
    TCOD_RENDERER_SDL = 2,
    TCOD_NB_RENDERERS = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_alignment_t { TCOD_LEFT = 0, TCOD_RIGHT = 1, TCOD_CENTER = 2, }
pub type TCOD_console_t = *mut ::std::os::raw::c_void;
pub type TCOD_image_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_image_new(width: ::std::os::raw::c_int,
                          height: ::std::os::raw::c_int) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_from_console(console: TCOD_console_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_refresh_console(image: TCOD_image_t,
                                      console: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_image_load(filename: *const ::std::os::raw::c_char)
     -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_clear(image: TCOD_image_t, color: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_invert(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_hflip(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_rotate90(image: TCOD_image_t,
                               numRotations: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_image_vflip(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_scale(image: TCOD_image_t, neww: ::std::os::raw::c_int,
                            newh: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_image_save(image: TCOD_image_t,
                           filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_image_get_size(image: TCOD_image_t,
                               w: *mut ::std::os::raw::c_int,
                               h: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_image_get_pixel(image: TCOD_image_t, x: ::std::os::raw::c_int,
                                y: ::std::os::raw::c_int) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_image_get_alpha(image: TCOD_image_t, x: ::std::os::raw::c_int,
                                y: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_image_get_mipmap_pixel(image: TCOD_image_t, x0: f32, y0: f32,
                                       x1: f32, y1: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_image_put_pixel(image: TCOD_image_t, x: ::std::os::raw::c_int,
                                y: ::std::os::raw::c_int, col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_blit(image: TCOD_image_t, console: TCOD_console_t,
                           x: f32, y: f32, bkgnd_flag: TCOD_bkgnd_flag_t,
                           scalex: f32, scaley: f32, angle: f32);
}
extern "C" {
    pub fn TCOD_image_blit_rect(image: TCOD_image_t, console: TCOD_console_t,
                                x: ::std::os::raw::c_int,
                                y: ::std::os::raw::c_int,
                                w: ::std::os::raw::c_int,
                                h: ::std::os::raw::c_int,
                                bkgnd_flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_image_blit_2x(image: TCOD_image_t, dest: TCOD_console_t,
                              dx: ::std::os::raw::c_int,
                              dy: ::std::os::raw::c_int,
                              sx: ::std::os::raw::c_int,
                              sy: ::std::os::raw::c_int,
                              w: ::std::os::raw::c_int,
                              h: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_image_delete(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_set_key_color(image: TCOD_image_t,
                                    key_color: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_is_pixel_transparent(image: TCOD_image_t,
                                           x: ::std::os::raw::c_int,
                                           y: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_console_init_root(w: ::std::os::raw::c_int,
                                  h: ::std::os::raw::c_int,
                                  title: *const ::std::os::raw::c_char,
                                  fullscreen: bool_,
                                  renderer: TCOD_renderer_t);
}
extern "C" {
    pub fn TCOD_console_set_window_title(title:
                                             *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_console_set_fullscreen(fullscreen: bool_);
}
extern "C" {
    pub fn TCOD_console_is_fullscreen() -> bool_;
}
extern "C" {
    pub fn TCOD_console_is_window_closed() -> bool_;
}
extern "C" {
    pub fn TCOD_console_has_mouse_focus() -> bool_;
}
extern "C" {
    pub fn TCOD_console_is_active() -> bool_;
}
extern "C" {
    pub fn TCOD_console_set_custom_font(fontFile:
                                            *const ::std::os::raw::c_char,
                                        flags: ::std::os::raw::c_int,
                                        nb_char_horiz: ::std::os::raw::c_int,
                                        nb_char_vertic:
                                            ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_console_map_ascii_code_to_font(asciiCode:
                                                   ::std::os::raw::c_int,
                                               fontCharX:
                                                   ::std::os::raw::c_int,
                                               fontCharY:
                                                   ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_console_map_ascii_codes_to_font(asciiCode:
                                                    ::std::os::raw::c_int,
                                                nbCodes:
                                                    ::std::os::raw::c_int,
                                                fontCharX:
                                                    ::std::os::raw::c_int,
                                                fontCharY:
                                                    ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_console_map_string_to_font(s: *const ::std::os::raw::c_char,
                                           fontCharX: ::std::os::raw::c_int,
                                           fontCharY: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_console_set_dirty(x: ::std::os::raw::c_int,
                                  y: ::std::os::raw::c_int,
                                  w: ::std::os::raw::c_int,
                                  h: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_console_set_default_background(con: TCOD_console_t,
                                               col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_set_default_foreground(con: TCOD_console_t,
                                               col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_clear(con: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_console_set_char_background(con: TCOD_console_t,
                                            x: ::std::os::raw::c_int,
                                            y: ::std::os::raw::c_int,
                                            col: TCOD_color_t,
                                            flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_set_char_foreground(con: TCOD_console_t,
                                            x: ::std::os::raw::c_int,
                                            y: ::std::os::raw::c_int,
                                            col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_set_char(con: TCOD_console_t,
                                 x: ::std::os::raw::c_int,
                                 y: ::std::os::raw::c_int,
                                 c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_console_put_char(con: TCOD_console_t,
                                 x: ::std::os::raw::c_int,
                                 y: ::std::os::raw::c_int,
                                 c: ::std::os::raw::c_int,
                                 flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_put_char_ex(con: TCOD_console_t,
                                    x: ::std::os::raw::c_int,
                                    y: ::std::os::raw::c_int,
                                    c: ::std::os::raw::c_int,
                                    fore: TCOD_color_t, back: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_set_background_flag(con: TCOD_console_t,
                                            flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_get_background_flag(con: TCOD_console_t)
     -> TCOD_bkgnd_flag_t;
}
extern "C" {
    pub fn TCOD_console_set_alignment(con: TCOD_console_t,
                                      alignment: TCOD_alignment_t);
}
extern "C" {
    pub fn TCOD_console_get_alignment(con: TCOD_console_t)
     -> TCOD_alignment_t;
}
extern "C" {
    pub fn TCOD_console_print(con: TCOD_console_t, x: ::std::os::raw::c_int,
                              y: ::std::os::raw::c_int,
                              fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn TCOD_console_print_ex(con: TCOD_console_t,
                                 x: ::std::os::raw::c_int,
                                 y: ::std::os::raw::c_int,
                                 flag: TCOD_bkgnd_flag_t,
                                 alignment: TCOD_alignment_t,
                                 fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn TCOD_console_print_rect(con: TCOD_console_t,
                                   x: ::std::os::raw::c_int,
                                   y: ::std::os::raw::c_int,
                                   w: ::std::os::raw::c_int,
                                   h: ::std::os::raw::c_int,
                                   fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print_rect_ex(con: TCOD_console_t,
                                      x: ::std::os::raw::c_int,
                                      y: ::std::os::raw::c_int,
                                      w: ::std::os::raw::c_int,
                                      h: ::std::os::raw::c_int,
                                      flag: TCOD_bkgnd_flag_t,
                                      alignment: TCOD_alignment_t,
                                      fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect(con: TCOD_console_t,
                                        x: ::std::os::raw::c_int,
                                        y: ::std::os::raw::c_int,
                                        w: ::std::os::raw::c_int,
                                        h: ::std::os::raw::c_int,
                                        fmt:
                                            *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_rect(con: TCOD_console_t, x: ::std::os::raw::c_int,
                             y: ::std::os::raw::c_int,
                             w: ::std::os::raw::c_int,
                             h: ::std::os::raw::c_int, clear: bool_,
                             flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_hline(con: TCOD_console_t, x: ::std::os::raw::c_int,
                              y: ::std::os::raw::c_int,
                              l: ::std::os::raw::c_int,
                              flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_vline(con: TCOD_console_t, x: ::std::os::raw::c_int,
                              y: ::std::os::raw::c_int,
                              l: ::std::os::raw::c_int,
                              flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_print_frame(con: TCOD_console_t,
                                    x: ::std::os::raw::c_int,
                                    y: ::std::os::raw::c_int,
                                    w: ::std::os::raw::c_int,
                                    h: ::std::os::raw::c_int, empty: bool_,
                                    flag: TCOD_bkgnd_flag_t,
                                    fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn TCOD_console_map_string_to_font_utf(s: *const wchar_t,
                                               fontCharX:
                                                   ::std::os::raw::c_int,
                                               fontCharY:
                                                   ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_console_print_utf(con: TCOD_console_t,
                                  x: ::std::os::raw::c_int,
                                  y: ::std::os::raw::c_int,
                                  fmt: *const wchar_t, ...);
}
extern "C" {
    pub fn TCOD_console_print_ex_utf(con: TCOD_console_t,
                                     x: ::std::os::raw::c_int,
                                     y: ::std::os::raw::c_int,
                                     flag: TCOD_bkgnd_flag_t,
                                     alignment: TCOD_alignment_t,
                                     fmt: *const wchar_t, ...);
}
extern "C" {
    pub fn TCOD_console_print_rect_utf(con: TCOD_console_t,
                                       x: ::std::os::raw::c_int,
                                       y: ::std::os::raw::c_int,
                                       w: ::std::os::raw::c_int,
                                       h: ::std::os::raw::c_int,
                                       fmt: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print_rect_ex_utf(con: TCOD_console_t,
                                          x: ::std::os::raw::c_int,
                                          y: ::std::os::raw::c_int,
                                          w: ::std::os::raw::c_int,
                                          h: ::std::os::raw::c_int,
                                          flag: TCOD_bkgnd_flag_t,
                                          alignment: TCOD_alignment_t,
                                          fmt: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect_utf(con: TCOD_console_t,
                                            x: ::std::os::raw::c_int,
                                            y: ::std::os::raw::c_int,
                                            w: ::std::os::raw::c_int,
                                            h: ::std::os::raw::c_int,
                                            fmt: *const wchar_t, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_default_background(con: TCOD_console_t)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_default_foreground(con: TCOD_console_t)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char_background(con: TCOD_console_t,
                                            x: ::std::os::raw::c_int,
                                            y: ::std::os::raw::c_int)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char_foreground(con: TCOD_console_t,
                                            x: ::std::os::raw::c_int,
                                            y: ::std::os::raw::c_int)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char(con: TCOD_console_t,
                                 x: ::std::os::raw::c_int,
                                 y: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_background_color_image(con: TCOD_console_t)
     -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_console_get_foreground_color_image(con: TCOD_console_t)
     -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_console_set_fade(val: uint8, fade: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_get_fade() -> uint8;
}
extern "C" {
    pub fn TCOD_console_get_fading_color() -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_flush();
}
extern "C" {
    pub fn TCOD_console_set_color_control(con: TCOD_colctrl_t,
                                          fore: TCOD_color_t,
                                          back: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_check_for_keypress(flags: ::std::os::raw::c_int)
     -> TCOD_key_t;
}
extern "C" {
    pub fn TCOD_console_wait_for_keypress(flush: bool_) -> TCOD_key_t;
}
extern "C" {
    pub fn TCOD_console_is_key_pressed(key: TCOD_keycode_t) -> bool_;
}
extern "C" {
    pub fn TCOD_console_from_file(filename: *const ::std::os::raw::c_char)
     -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_load_asc(con: TCOD_console_t,
                                 filename: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_console_load_apf(con: TCOD_console_t,
                                 filename: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_console_save_asc(con: TCOD_console_t,
                                 filename: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_console_save_apf(con: TCOD_console_t,
                                 filename: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_console_new(w: ::std::os::raw::c_int,
                            h: ::std::os::raw::c_int) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_get_width(con: TCOD_console_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height(con: TCOD_console_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_set_key_color(con: TCOD_console_t, col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_blit(src: TCOD_console_t, xSrc: ::std::os::raw::c_int,
                             ySrc: ::std::os::raw::c_int,
                             wSrc: ::std::os::raw::c_int,
                             hSrc: ::std::os::raw::c_int, dst: TCOD_console_t,
                             xDst: ::std::os::raw::c_int,
                             yDst: ::std::os::raw::c_int,
                             foreground_alpha: f32, background_alpha: f32);
}
extern "C" {
    pub fn TCOD_console_delete(console: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_console_credits();
}
extern "C" {
    pub fn TCOD_console_credits_reset();
}
extern "C" {
    pub fn TCOD_console_credits_render(x: ::std::os::raw::c_int,
                                       y: ::std::os::raw::c_int, alpha: bool_)
     -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_mouse_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub dx: ::std::os::raw::c_int,
    pub dy: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub cy: ::std::os::raw::c_int,
    pub dcx: ::std::os::raw::c_int,
    pub dcy: ::std::os::raw::c_int,
    pub lbutton: bool_,
    pub rbutton: bool_,
    pub mbutton: bool_,
    pub lbutton_pressed: bool_,
    pub rbutton_pressed: bool_,
    pub mbutton_pressed: bool_,
    pub wheel_up: bool_,
    pub wheel_down: bool_,
}
impl Clone for TCOD_mouse_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TCOD_mouse_show_cursor(visible: bool_);
}
extern "C" {
    pub fn TCOD_mouse_get_status() -> TCOD_mouse_t;
}
extern "C" {
    pub fn TCOD_mouse_is_cursor_visible() -> bool_;
}
extern "C" {
    pub fn TCOD_mouse_move(x: ::std::os::raw::c_int,
                           y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_mouse_includes_touch(enable: bool_);
}
extern "C" {
    pub fn TCOD_sys_startup();
}
extern "C" {
    pub fn TCOD_sys_shutdown();
}
extern "C" {
    pub fn TCOD_sys_elapsed_milli() -> uint32;
}
extern "C" {
    pub fn TCOD_sys_elapsed_seconds() -> f32;
}
extern "C" {
    pub fn TCOD_sys_sleep_milli(val: uint32);
}
extern "C" {
    pub fn TCOD_sys_save_screenshot(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_sys_force_fullscreen_resolution(width: ::std::os::raw::c_int,
                                                height:
                                                    ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_sys_set_renderer(renderer: TCOD_renderer_t);
}
extern "C" {
    pub fn TCOD_sys_get_renderer() -> TCOD_renderer_t;
}
extern "C" {
    pub fn TCOD_sys_set_fps(val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_fps() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_sys_get_last_frame_length() -> f32;
}
extern "C" {
    pub fn TCOD_sys_get_current_resolution(w: *mut ::std::os::raw::c_int,
                                           h: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_fullscreen_offsets(offx: *mut ::std::os::raw::c_int,
                                           offy: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_sys_update_char(asciiCode: ::std::os::raw::c_int,
                                fontx: ::std::os::raw::c_int,
                                fonty: ::std::os::raw::c_int,
                                img: TCOD_image_t, x: ::std::os::raw::c_int,
                                y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_char_size(w: *mut ::std::os::raw::c_int,
                                  h: *mut ::std::os::raw::c_int);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_event_t {
    TCOD_EVENT_NONE = 0,
    TCOD_EVENT_KEY_PRESS = 1,
    TCOD_EVENT_KEY_RELEASE = 2,
    TCOD_EVENT_KEY = 3,
    TCOD_EVENT_MOUSE_MOVE = 4,
    TCOD_EVENT_MOUSE_PRESS = 8,
    TCOD_EVENT_MOUSE_RELEASE = 16,
    TCOD_EVENT_MOUSE = 28,
    TCOD_EVENT_FINGER_MOVE = 32,
    TCOD_EVENT_FINGER_PRESS = 64,
    TCOD_EVENT_FINGER_RELEASE = 128,
    TCOD_EVENT_FINGER = 224,
    TCOD_EVENT_ANY = 255,
}
extern "C" {
    pub fn TCOD_sys_wait_for_event(eventMask: ::std::os::raw::c_int,
                                   key: *mut TCOD_key_t,
                                   mouse: *mut TCOD_mouse_t, flush: bool_)
     -> TCOD_event_t;
}
extern "C" {
    pub fn TCOD_sys_check_for_event(eventMask: ::std::os::raw::c_int,
                                    key: *mut TCOD_key_t,
                                    mouse: *mut TCOD_mouse_t) -> TCOD_event_t;
}
extern "C" {
    pub fn TCOD_sys_create_directory(path: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_sys_delete_file(path: *const ::std::os::raw::c_char) -> bool_;
}
extern "C" {
    pub fn TCOD_sys_delete_directory(path: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_sys_is_directory(path: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_sys_get_directory_content(path: *const ::std::os::raw::c_char,
                                          pattern:
                                              *const ::std::os::raw::c_char)
     -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_sys_file_exists(filename: *const ::std::os::raw::c_char, ...)
     -> bool_;
}
extern "C" {
    pub fn TCOD_sys_read_file(filename: *const ::std::os::raw::c_char,
                              buf: *mut *mut ::std::os::raw::c_uchar,
                              size: *mut usize) -> bool_;
}
extern "C" {
    pub fn TCOD_sys_write_file(filename: *const ::std::os::raw::c_char,
                               buf: *mut ::std::os::raw::c_uchar,
                               size: uint32) -> bool_;
}
extern "C" {
    pub fn TCOD_sys_clipboard_set(value: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_sys_clipboard_get() -> *mut ::std::os::raw::c_char;
}
pub type TCOD_thread_t = *mut ::std::os::raw::c_void;
pub type TCOD_semaphore_t = *mut ::std::os::raw::c_void;
pub type TCOD_mutex_t = *mut ::std::os::raw::c_void;
pub type TCOD_cond_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_thread_new(func:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           data: *mut ::std::os::raw::c_void)
     -> TCOD_thread_t;
}
extern "C" {
    pub fn TCOD_thread_delete(th: TCOD_thread_t);
}
extern "C" {
    pub fn TCOD_sys_get_num_cores() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_thread_wait(th: TCOD_thread_t);
}
extern "C" {
    pub fn TCOD_mutex_new() -> TCOD_mutex_t;
}
extern "C" {
    pub fn TCOD_mutex_in(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_mutex_out(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_mutex_delete(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_semaphore_new(initVal: ::std::os::raw::c_int)
     -> TCOD_semaphore_t;
}
extern "C" {
    pub fn TCOD_semaphore_lock(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_semaphore_unlock(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_semaphore_delete(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_condition_new() -> TCOD_cond_t;
}
extern "C" {
    pub fn TCOD_condition_signal(sem: TCOD_cond_t);
}
extern "C" {
    pub fn TCOD_condition_broadcast(sem: TCOD_cond_t);
}
extern "C" {
    pub fn TCOD_condition_wait(sem: TCOD_cond_t, mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_condition_delete(sem: TCOD_cond_t);
}
pub type TCOD_library_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_load_library(path: *const ::std::os::raw::c_char)
     -> TCOD_library_t;
}
extern "C" {
    pub fn TCOD_get_function_address(library: TCOD_library_t,
                                     function_name:
                                         *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_close_library(arg1: TCOD_library_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_dice_t {
    pub nb_rolls: ::std::os::raw::c_int,
    pub nb_faces: ::std::os::raw::c_int,
    pub multiplier: f32,
    pub addsub: f32,
}
impl Clone for TCOD_dice_t {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_random_algo_t { TCOD_RNG_MT = 0, TCOD_RNG_CMWC = 1, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_distribution_t {
    TCOD_DISTRIBUTION_LINEAR = 0,
    TCOD_DISTRIBUTION_GAUSSIAN = 1,
    TCOD_DISTRIBUTION_GAUSSIAN_RANGE = 2,
    TCOD_DISTRIBUTION_GAUSSIAN_INVERSE = 3,
    TCOD_DISTRIBUTION_GAUSSIAN_RANGE_INVERSE = 4,
}
pub type TCOD_random_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_random_get_instance() -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_new(algo: TCOD_random_algo_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_save(mersenne: TCOD_random_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_restore(mersenne: TCOD_random_t,
                               backup: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_random_new_from_seed(algo: TCOD_random_algo_t, seed: uint32)
     -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_delete(mersenne: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_random_set_distribution(mersenne: TCOD_random_t,
                                        distribution: TCOD_distribution_t);
}
extern "C" {
    pub fn TCOD_random_get_int(mersenne: TCOD_random_t,
                               min: ::std::os::raw::c_int,
                               max: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_get_float(mersenne: TCOD_random_t, min: f32, max: f32)
     -> f32;
}
extern "C" {
    pub fn TCOD_random_get_double(mersenne: TCOD_random_t, min: f64, max: f64)
     -> f64;
}
extern "C" {
    pub fn TCOD_random_get_int_mean(mersenne: TCOD_random_t,
                                    min: ::std::os::raw::c_int,
                                    max: ::std::os::raw::c_int,
                                    mean: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_get_float_mean(mersenne: TCOD_random_t, min: f32,
                                      max: f32, mean: f32) -> f32;
}
extern "C" {
    pub fn TCOD_random_get_double_mean(mersenne: TCOD_random_t, min: f64,
                                       max: f64, mean: f64) -> f64;
}
extern "C" {
    pub fn TCOD_random_dice_new(s: *const ::std::os::raw::c_char)
     -> TCOD_dice_t;
}
extern "C" {
    pub fn TCOD_random_dice_roll(mersenne: TCOD_random_t, dice: TCOD_dice_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_dice_roll_s(mersenne: TCOD_random_t,
                                   s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
pub type TCOD_line_listener_t =
    ::std::option::Option<unsafe extern "C" fn(x: ::std::os::raw::c_int,
                                               y: ::std::os::raw::c_int)
                              -> bool_>;
extern "C" {
    pub fn TCOD_line_init(xFrom: ::std::os::raw::c_int,
                          yFrom: ::std::os::raw::c_int,
                          xTo: ::std::os::raw::c_int,
                          yTo: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_line_step(xCur: *mut ::std::os::raw::c_int,
                          yCur: *mut ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_line(xFrom: ::std::os::raw::c_int,
                     yFrom: ::std::os::raw::c_int, xTo: ::std::os::raw::c_int,
                     yTo: ::std::os::raw::c_int,
                     listener: TCOD_line_listener_t) -> bool_;
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct TCOD_bresenham_data_t {
    pub stepx: ::std::os::raw::c_int,
    pub stepy: ::std::os::raw::c_int,
    pub e: ::std::os::raw::c_int,
    pub deltax: ::std::os::raw::c_int,
    pub deltay: ::std::os::raw::c_int,
    pub origx: ::std::os::raw::c_int,
    pub origy: ::std::os::raw::c_int,
    pub destx: ::std::os::raw::c_int,
    pub desty: ::std::os::raw::c_int,
}
impl Clone for TCOD_bresenham_data_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TCOD_line_init_mt(xFrom: ::std::os::raw::c_int,
                             yFrom: ::std::os::raw::c_int,
                             xTo: ::std::os::raw::c_int,
                             yTo: ::std::os::raw::c_int,
                             data: *mut TCOD_bresenham_data_t);
}
extern "C" {
    pub fn TCOD_line_step_mt(xCur: *mut ::std::os::raw::c_int,
                             yCur: *mut ::std::os::raw::c_int,
                             data: *mut TCOD_bresenham_data_t) -> bool_;
}
extern "C" {
    pub fn TCOD_line_mt(xFrom: ::std::os::raw::c_int,
                        yFrom: ::std::os::raw::c_int,
                        xTo: ::std::os::raw::c_int,
                        yTo: ::std::os::raw::c_int,
                        listener: TCOD_line_listener_t,
                        data: *mut TCOD_bresenham_data_t) -> bool_;
}
pub type TCOD_noise_t = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_noise_type_t {
    TCOD_NOISE_PERLIN = 1,
    TCOD_NOISE_SIMPLEX = 2,
    TCOD_NOISE_WAVELET = 4,
    TCOD_NOISE_DEFAULT = 0,
}
extern "C" {
    pub fn TCOD_noise_new(dimensions: ::std::os::raw::c_int, hurst: f32,
                          lacunarity: f32, random: TCOD_random_t)
     -> TCOD_noise_t;
}
extern "C" {
    pub fn TCOD_noise_set_type(noise: TCOD_noise_t, type_: TCOD_noise_type_t);
}
extern "C" {
    pub fn TCOD_noise_get_ex(noise: TCOD_noise_t, f: *mut f32,
                             type_: TCOD_noise_type_t) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_fbm_ex(noise: TCOD_noise_t, f: *mut f32,
                                 octaves: f32, type_: TCOD_noise_type_t)
     -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_turbulence_ex(noise: TCOD_noise_t, f: *mut f32,
                                        octaves: f32,
                                        type_: TCOD_noise_type_t) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get(noise: TCOD_noise_t, f: *mut f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_fbm(noise: TCOD_noise_t, f: *mut f32, octaves: f32)
     -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_turbulence(noise: TCOD_noise_t, f: *mut f32,
                                     octaves: f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_delete(noise: TCOD_noise_t);
}
pub type TCOD_map_t = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_fov_algorithm_t {
    FOV_BASIC = 0,
    FOV_DIAMOND = 1,
    FOV_SHADOW = 2,
    FOV_PERMISSIVE_0 = 3,
    FOV_PERMISSIVE_1 = 4,
    FOV_PERMISSIVE_2 = 5,
    FOV_PERMISSIVE_3 = 6,
    FOV_PERMISSIVE_4 = 7,
    FOV_PERMISSIVE_5 = 8,
    FOV_PERMISSIVE_6 = 9,
    FOV_PERMISSIVE_7 = 10,
    FOV_PERMISSIVE_8 = 11,
    FOV_RESTRICTIVE = 12,
    NB_FOV_ALGORITHMS = 13,
}
extern "C" {
    pub fn TCOD_map_new(width: ::std::os::raw::c_int,
                        height: ::std::os::raw::c_int) -> TCOD_map_t;
}
extern "C" {
    pub fn TCOD_map_clear(map: TCOD_map_t, transparent: bool_,
                          walkable: bool_);
}
extern "C" {
    pub fn TCOD_map_copy(source: TCOD_map_t, dest: TCOD_map_t);
}
extern "C" {
    pub fn TCOD_map_set_properties(map: TCOD_map_t, x: ::std::os::raw::c_int,
                                   y: ::std::os::raw::c_int,
                                   is_transparent: bool_, is_walkable: bool_);
}
extern "C" {
    pub fn TCOD_map_delete(map: TCOD_map_t);
}
extern "C" {
    pub fn TCOD_map_compute_fov(map: TCOD_map_t,
                                player_x: ::std::os::raw::c_int,
                                player_y: ::std::os::raw::c_int,
                                max_radius: ::std::os::raw::c_int,
                                light_walls: bool_,
                                algo: TCOD_fov_algorithm_t);
}
extern "C" {
    pub fn TCOD_map_is_in_fov(map: TCOD_map_t, x: ::std::os::raw::c_int,
                              y: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_map_set_in_fov(map: TCOD_map_t, x: ::std::os::raw::c_int,
                               y: ::std::os::raw::c_int, fov: bool_);
}
extern "C" {
    pub fn TCOD_map_is_transparent(map: TCOD_map_t, x: ::std::os::raw::c_int,
                                   y: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_map_is_walkable(map: TCOD_map_t, x: ::std::os::raw::c_int,
                                y: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_map_get_width(map: TCOD_map_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_map_get_height(map: TCOD_map_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_map_get_nb_cells(map: TCOD_map_t) -> ::std::os::raw::c_int;
}
pub type TCOD_path_func_t =
    ::std::option::Option<unsafe extern "C" fn(xFrom: ::std::os::raw::c_int,
                                               yFrom: ::std::os::raw::c_int,
                                               xTo: ::std::os::raw::c_int,
                                               yTo: ::std::os::raw::c_int,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> f32>;
pub type TCOD_path_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_path_new_using_map(map: TCOD_map_t, diagonalCost: f32)
     -> TCOD_path_t;
}
extern "C" {
    pub fn TCOD_path_new_using_function(map_width: ::std::os::raw::c_int,
                                        map_height: ::std::os::raw::c_int,
                                        func: TCOD_path_func_t,
                                        user_data:
                                            *mut ::std::os::raw::c_void,
                                        diagonalCost: f32) -> TCOD_path_t;
}
extern "C" {
    pub fn TCOD_path_compute(path: TCOD_path_t, ox: ::std::os::raw::c_int,
                             oy: ::std::os::raw::c_int,
                             dx: ::std::os::raw::c_int,
                             dy: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_path_walk(path: TCOD_path_t, x: *mut ::std::os::raw::c_int,
                          y: *mut ::std::os::raw::c_int,
                          recalculate_when_needed: bool_) -> bool_;
}
extern "C" {
    pub fn TCOD_path_is_empty(path: TCOD_path_t) -> bool_;
}
extern "C" {
    pub fn TCOD_path_size(path: TCOD_path_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_path_reverse(path: TCOD_path_t);
}
extern "C" {
    pub fn TCOD_path_get(path: TCOD_path_t, index: ::std::os::raw::c_int,
                         x: *mut ::std::os::raw::c_int,
                         y: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_path_get_origin(path: TCOD_path_t,
                                x: *mut ::std::os::raw::c_int,
                                y: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_path_get_destination(path: TCOD_path_t,
                                     x: *mut ::std::os::raw::c_int,
                                     y: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_path_delete(path: TCOD_path_t);
}
pub type TCOD_dijkstra_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_dijkstra_new(map: TCOD_map_t, diagonalCost: f32)
     -> TCOD_dijkstra_t;
}
extern "C" {
    pub fn TCOD_dijkstra_new_using_function(map_width: ::std::os::raw::c_int,
                                            map_height: ::std::os::raw::c_int,
                                            func: TCOD_path_func_t,
                                            user_data:
                                                *mut ::std::os::raw::c_void,
                                            diagonalCost: f32)
     -> TCOD_dijkstra_t;
}
extern "C" {
    pub fn TCOD_dijkstra_compute(dijkstra: TCOD_dijkstra_t,
                                 root_x: ::std::os::raw::c_int,
                                 root_y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_dijkstra_get_distance(dijkstra: TCOD_dijkstra_t,
                                      x: ::std::os::raw::c_int,
                                      y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn TCOD_dijkstra_path_set(dijkstra: TCOD_dijkstra_t,
                                  x: ::std::os::raw::c_int,
                                  y: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_dijkstra_is_empty(path: TCOD_dijkstra_t) -> bool_;
}
extern "C" {
    pub fn TCOD_dijkstra_size(path: TCOD_dijkstra_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_dijkstra_reverse(path: TCOD_dijkstra_t);
}
extern "C" {
    pub fn TCOD_dijkstra_get(path: TCOD_dijkstra_t,
                             index: ::std::os::raw::c_int,
                             x: *mut ::std::os::raw::c_int,
                             y: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_dijkstra_path_walk(dijkstra: TCOD_dijkstra_t,
                                   x: *mut ::std::os::raw::c_int,
                                   y: *mut ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_dijkstra_delete(dijkstra: TCOD_dijkstra_t);
}
#[repr(C)]
pub struct TCOD_lex_t {
    pub file_line: ::std::os::raw::c_int,
    pub token_type: ::std::os::raw::c_int,
    pub token_int_val: ::std::os::raw::c_int,
    pub token_idx: ::std::os::raw::c_int,
    pub token_float_val: f32,
    pub tok: *mut ::std::os::raw::c_char,
    pub toklen: ::std::os::raw::c_int,
    pub lastStringDelim: ::std::os::raw::c_char,
    pub pos: *mut ::std::os::raw::c_char,
    pub buf: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub last_javadoc_comment: *mut ::std::os::raw::c_char,
    pub nb_symbols: ::std::os::raw::c_int,
    pub nb_keywords: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub symbols: [[::std::os::raw::c_char; 5usize]; 100usize],
    pub keywords: [[::std::os::raw::c_char; 20usize]; 100usize],
    pub simpleCmt: *const ::std::os::raw::c_char,
    pub cmtStart: *const ::std::os::raw::c_char,
    pub cmtStop: *const ::std::os::raw::c_char,
    pub javadocCmtStart: *const ::std::os::raw::c_char,
    pub stringDelim: *const ::std::os::raw::c_char,
    pub javadoc_read: bool_,
    pub allocBuf: bool_,
    pub savept: bool_,
}
extern "C" {
    pub fn TCOD_lex_new_intern() -> *mut TCOD_lex_t;
}
extern "C" {
    pub fn TCOD_lex_new(symbols: *mut *const ::std::os::raw::c_char,
                        keywords: *mut *const ::std::os::raw::c_char,
                        simpleComment: *const ::std::os::raw::c_char,
                        commentStart: *const ::std::os::raw::c_char,
                        commentStop: *const ::std::os::raw::c_char,
                        javadocCommentStart: *const ::std::os::raw::c_char,
                        stringDelim: *const ::std::os::raw::c_char,
                        flags: ::std::os::raw::c_int) -> *mut TCOD_lex_t;
}
extern "C" {
    pub fn TCOD_lex_delete(lex: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_set_data_buffer(lex: *mut TCOD_lex_t,
                                    dat: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_lex_set_data_file(lex: *mut TCOD_lex_t,
                                  filename: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_lex_parse(lex: *mut TCOD_lex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_parse_until_token_type(lex: *mut TCOD_lex_t,
                                           token_type: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_parse_until_token_value(lex: *mut TCOD_lex_t,
                                            token_value:
                                                *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_expect_token_type(lex: *mut TCOD_lex_t,
                                      token_type: ::std::os::raw::c_int)
     -> bool_;
}
extern "C" {
    pub fn TCOD_lex_expect_token_value(lex: *mut TCOD_lex_t,
                                       token_type: ::std::os::raw::c_int,
                                       token_value:
                                           *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_lex_savepoint(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_restore(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_get_last_javadoc(lex: *mut TCOD_lex_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_get_token_name(token_type: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_get_last_error() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_hextoint(c: ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_value_type_t {
    TCOD_TYPE_NONE = 0,
    TCOD_TYPE_BOOL = 1,
    TCOD_TYPE_CHAR = 2,
    TCOD_TYPE_INT = 3,
    TCOD_TYPE_FLOAT = 4,
    TCOD_TYPE_STRING = 5,
    TCOD_TYPE_COLOR = 6,
    TCOD_TYPE_DICE = 7,
    TCOD_TYPE_VALUELIST00 = 8,
    TCOD_TYPE_VALUELIST01 = 9,
    TCOD_TYPE_VALUELIST02 = 10,
    TCOD_TYPE_VALUELIST03 = 11,
    TCOD_TYPE_VALUELIST04 = 12,
    TCOD_TYPE_VALUELIST05 = 13,
    TCOD_TYPE_VALUELIST06 = 14,
    TCOD_TYPE_VALUELIST07 = 15,
    TCOD_TYPE_VALUELIST08 = 16,
    TCOD_TYPE_VALUELIST09 = 17,
    TCOD_TYPE_VALUELIST10 = 18,
    TCOD_TYPE_VALUELIST11 = 19,
    TCOD_TYPE_VALUELIST12 = 20,
    TCOD_TYPE_VALUELIST13 = 21,
    TCOD_TYPE_VALUELIST14 = 22,
    TCOD_TYPE_VALUELIST15 = 23,
    TCOD_TYPE_CUSTOM00 = 24,
    TCOD_TYPE_CUSTOM01 = 25,
    TCOD_TYPE_CUSTOM02 = 26,
    TCOD_TYPE_CUSTOM03 = 27,
    TCOD_TYPE_CUSTOM04 = 28,
    TCOD_TYPE_CUSTOM05 = 29,
    TCOD_TYPE_CUSTOM06 = 30,
    TCOD_TYPE_CUSTOM07 = 31,
    TCOD_TYPE_CUSTOM08 = 32,
    TCOD_TYPE_CUSTOM09 = 33,
    TCOD_TYPE_CUSTOM10 = 34,
    TCOD_TYPE_CUSTOM11 = 35,
    TCOD_TYPE_CUSTOM12 = 36,
    TCOD_TYPE_CUSTOM13 = 37,
    TCOD_TYPE_CUSTOM14 = 38,
    TCOD_TYPE_CUSTOM15 = 39,
    TCOD_TYPE_LIST = 1024,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_value_t {
    pub b: __BindgenUnionField<bool_>,
    pub c: __BindgenUnionField<::std::os::raw::c_char>,
    pub i: __BindgenUnionField<int32>,
    pub f: __BindgenUnionField<f32>,
    pub s: __BindgenUnionField<*mut ::std::os::raw::c_char>,
    pub col: __BindgenUnionField<TCOD_color_t>,
    pub dice: __BindgenUnionField<TCOD_dice_t>,
    pub list: __BindgenUnionField<TCOD_list_t>,
    pub custom: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub bindgen_union_field: [u64; 2usize],
}
impl Clone for TCOD_value_t {
    fn clone(&self) -> Self { *self }
}
pub type TCOD_parser_struct_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_struct_get_name(def: TCOD_parser_struct_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_struct_add_property(def: TCOD_parser_struct_t,
                                    name: *const ::std::os::raw::c_char,
                                    type_: TCOD_value_type_t,
                                    mandatory: bool_);
}
extern "C" {
    pub fn TCOD_struct_add_list_property(def: TCOD_parser_struct_t,
                                         name: *const ::std::os::raw::c_char,
                                         type_: TCOD_value_type_t,
                                         mandatory: bool_);
}
extern "C" {
    pub fn TCOD_struct_add_value_list(def: TCOD_parser_struct_t,
                                      name: *const ::std::os::raw::c_char,
                                      value_list:
                                          *mut *const ::std::os::raw::c_char,
                                      mandatory: bool_);
}
extern "C" {
    pub fn TCOD_struct_add_value_list_sized(def: TCOD_parser_struct_t,
                                            name:
                                                *const ::std::os::raw::c_char,
                                            value_list:
                                                *mut *const ::std::os::raw::c_char,
                                            size: ::std::os::raw::c_int,
                                            mandatory: bool_);
}
extern "C" {
    pub fn TCOD_struct_add_flag(def: TCOD_parser_struct_t,
                                propname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_struct_add_structure(def: TCOD_parser_struct_t,
                                     sub_structure: TCOD_parser_struct_t);
}
extern "C" {
    pub fn TCOD_struct_is_mandatory(def: TCOD_parser_struct_t,
                                    propname: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_struct_get_type(def: TCOD_parser_struct_t,
                                propname: *const ::std::os::raw::c_char)
     -> TCOD_value_type_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_parser_listener_t {
    pub new_struct: ::std::option::Option<unsafe extern "C" fn(str:
                                                                   TCOD_parser_struct_t,
                                                               name:
                                                                   *const ::std::os::raw::c_char)
                                              -> bool_>,
    pub new_flag: ::std::option::Option<unsafe extern "C" fn(name:
                                                                 *const ::std::os::raw::c_char)
                                            -> bool_>,
    pub new_property: ::std::option::Option<unsafe extern "C" fn(propname:
                                                                     *const ::std::os::raw::c_char,
                                                                 type_:
                                                                     TCOD_value_type_t,
                                                                 value:
                                                                     TCOD_value_t)
                                                -> bool_>,
    pub end_struct: ::std::option::Option<unsafe extern "C" fn(str:
                                                                   TCOD_parser_struct_t,
                                                               name:
                                                                   *const ::std::os::raw::c_char)
                                              -> bool_>,
    pub error: ::std::option::Option<unsafe extern "C" fn(msg:
                                                              *const ::std::os::raw::c_char)>,
}
impl Clone for TCOD_parser_listener_t {
    fn clone(&self) -> Self { *self }
}
pub type TCOD_parser_custom_t =
    ::std::option::Option<unsafe extern "C" fn(lex: *mut TCOD_lex_t,
                                               listener:
                                                   *mut TCOD_parser_listener_t,
                                               str: TCOD_parser_struct_t,
                                               propname:
                                                   *mut ::std::os::raw::c_char)
                              -> TCOD_value_t>;
pub type TCOD_parser_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_parser_new() -> TCOD_parser_t;
}
extern "C" {
    pub fn TCOD_parser_new_struct(parser: TCOD_parser_t,
                                  name: *mut ::std::os::raw::c_char)
     -> TCOD_parser_struct_t;
}
extern "C" {
    pub fn TCOD_parser_new_custom_type(parser: TCOD_parser_t,
                                       custom_type_parser:
                                           TCOD_parser_custom_t)
     -> TCOD_value_type_t;
}
extern "C" {
    pub fn TCOD_parser_run(parser: TCOD_parser_t,
                           filename: *const ::std::os::raw::c_char,
                           listener: *mut TCOD_parser_listener_t);
}
extern "C" {
    pub fn TCOD_parser_delete(parser: TCOD_parser_t);
}
extern "C" {
    pub fn TCOD_parser_error(msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn TCOD_parser_has_property(parser: TCOD_parser_t,
                                    name: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_parser_get_bool_property(parser: TCOD_parser_t,
                                         name: *const ::std::os::raw::c_char)
     -> bool_;
}
extern "C" {
    pub fn TCOD_parser_get_char_property(parser: TCOD_parser_t,
                                         name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_parser_get_int_property(parser: TCOD_parser_t,
                                        name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_parser_get_float_property(parser: TCOD_parser_t,
                                          name: *const ::std::os::raw::c_char)
     -> f32;
}
extern "C" {
    pub fn TCOD_parser_get_string_property(parser: TCOD_parser_t,
                                           name:
                                               *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_parser_get_color_property(parser: TCOD_parser_t,
                                          name: *const ::std::os::raw::c_char)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_parser_get_dice_property(parser: TCOD_parser_t,
                                         name: *const ::std::os::raw::c_char)
     -> TCOD_dice_t;
}
extern "C" {
    pub fn TCOD_parser_get_dice_property_py(parser: TCOD_parser_t,
                                            name:
                                                *const ::std::os::raw::c_char,
                                            dice: *mut TCOD_dice_t);
}
extern "C" {
    pub fn TCOD_parser_get_custom_property(parser: TCOD_parser_t,
                                           name:
                                               *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_parser_get_list_property(parser: TCOD_parser_t,
                                         name: *const ::std::os::raw::c_char,
                                         type_: TCOD_value_type_t)
     -> TCOD_list_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_struct_int_t {
    pub name: *mut ::std::os::raw::c_char,
    pub flags: TCOD_list_t,
    pub props: TCOD_list_t,
    pub lists: TCOD_list_t,
    pub structs: TCOD_list_t,
}
impl Clone for TCOD_struct_int_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_parser_int_t {
    pub structs: TCOD_list_t,
    pub customs: [TCOD_parser_custom_t; 16usize],
    pub fatal: bool_,
    pub props: TCOD_list_t,
}
impl Clone for TCOD_parser_int_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TCOD_parse_bool_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_char_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_integer_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_float_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_string_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_color_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_dice_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_value_list_value(def: *mut TCOD_struct_int_t,
                                       listnum: ::std::os::raw::c_int)
     -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_property_value(parser: *mut TCOD_parser_int_t,
                                     def: TCOD_parser_struct_t,
                                     propname: *mut ::std::os::raw::c_char,
                                     list: bool_) -> TCOD_value_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _TCOD_tree_t {
    pub next: *mut _TCOD_tree_t,
    pub father: *mut _TCOD_tree_t,
    pub sons: *mut _TCOD_tree_t,
}
impl Clone for _TCOD_tree_t {
    fn clone(&self) -> Self { *self }
}
pub type TCOD_tree_t = _TCOD_tree_t;
extern "C" {
    pub fn TCOD_tree_new() -> *mut TCOD_tree_t;
}
extern "C" {
    pub fn TCOD_tree_add_son(node: *mut TCOD_tree_t, son: *mut TCOD_tree_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_bsp_t {
    pub tree: TCOD_tree_t,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub position: ::std::os::raw::c_int,
    pub level: uint8,
    pub horizontal: bool_,
}
impl Clone for TCOD_bsp_t {
    fn clone(&self) -> Self { *self }
}
pub type TCOD_bsp_callback_t =
    ::std::option::Option<unsafe extern "C" fn(node: *mut TCOD_bsp_t,
                                               userData:
                                                   *mut ::std::os::raw::c_void)
                              -> bool_>;
extern "C" {
    pub fn TCOD_bsp_new() -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_new_with_size(x: ::std::os::raw::c_int,
                                  y: ::std::os::raw::c_int,
                                  w: ::std::os::raw::c_int,
                                  h: ::std::os::raw::c_int)
     -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_delete(node: *mut TCOD_bsp_t);
}
extern "C" {
    pub fn TCOD_bsp_left(node: *const TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_right(node: *const TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_father(node: *const TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_is_leaf(node: *const TCOD_bsp_t) -> bool_;
}
extern "C" {
    pub fn TCOD_bsp_traverse_pre_order(node: *mut TCOD_bsp_t,
                                       listener: TCOD_bsp_callback_t,
                                       userData: *mut ::std::os::raw::c_void)
     -> bool_;
}
extern "C" {
    pub fn TCOD_bsp_traverse_in_order(node: *mut TCOD_bsp_t,
                                      listener: TCOD_bsp_callback_t,
                                      userData: *mut ::std::os::raw::c_void)
     -> bool_;
}
extern "C" {
    pub fn TCOD_bsp_traverse_post_order(node: *mut TCOD_bsp_t,
                                        listener: TCOD_bsp_callback_t,
                                        userData: *mut ::std::os::raw::c_void)
     -> bool_;
}
extern "C" {
    pub fn TCOD_bsp_traverse_level_order(node: *mut TCOD_bsp_t,
                                         listener: TCOD_bsp_callback_t,
                                         userData:
                                             *mut ::std::os::raw::c_void)
     -> bool_;
}
extern "C" {
    pub fn TCOD_bsp_traverse_inverted_level_order(node: *mut TCOD_bsp_t,
                                                  listener:
                                                      TCOD_bsp_callback_t,
                                                  userData:
                                                      *mut ::std::os::raw::c_void)
     -> bool_;
}
extern "C" {
    pub fn TCOD_bsp_contains(node: *const TCOD_bsp_t, x: ::std::os::raw::c_int,
                             y: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn TCOD_bsp_find_node(node: *const TCOD_bsp_t, x: ::std::os::raw::c_int,
                              y: ::std::os::raw::c_int) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_resize(node: *mut TCOD_bsp_t, x: ::std::os::raw::c_int,
                           y: ::std::os::raw::c_int, w: ::std::os::raw::c_int,
                           h: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_bsp_split_once(node: *mut TCOD_bsp_t, horizontal: bool_,
                               position: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_bsp_split_recursive(node: *mut TCOD_bsp_t,
                                    randomizer: TCOD_random_t,
                                    nb: ::std::os::raw::c_int,
                                    minHSize: ::std::os::raw::c_int,
                                    minVSize: ::std::os::raw::c_int,
                                    maxHRatio: f32, maxVRatio: f32);
}
extern "C" {
    pub fn TCOD_bsp_remove_sons(node: *mut TCOD_bsp_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_heightmap_t {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub values: *mut f32,
}
impl Clone for TCOD_heightmap_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TCOD_heightmap_new(w: ::std::os::raw::c_int,
                              h: ::std::os::raw::c_int)
     -> *mut TCOD_heightmap_t;
}
extern "C" {
    pub fn TCOD_heightmap_delete(hm: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_get_value(hm: *const TCOD_heightmap_t,
                                    x: ::std::os::raw::c_int,
                                    y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_get_interpolated_value(hm: *const TCOD_heightmap_t,
                                                 x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_set_value(hm: *mut TCOD_heightmap_t,
                                    x: ::std::os::raw::c_int,
                                    y: ::std::os::raw::c_int, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_get_slope(hm: *const TCOD_heightmap_t,
                                    x: ::std::os::raw::c_int,
                                    y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_get_normal(hm: *const TCOD_heightmap_t, x: f32,
                                     y: f32, n: *mut f32, waterLevel: f32);
}
extern "C" {
    pub fn TCOD_heightmap_count_cells(hm: *const TCOD_heightmap_t, min: f32,
                                      max: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_heightmap_has_land_on_border(hm: *const TCOD_heightmap_t,
                                             waterLevel: f32) -> bool_;
}
extern "C" {
    pub fn TCOD_heightmap_get_minmax(hm: *const TCOD_heightmap_t,
                                     min: *mut f32, max: *mut f32);
}
extern "C" {
    pub fn TCOD_heightmap_copy(hm_source: *const TCOD_heightmap_t,
                               hm_dest: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_add(hm: *mut TCOD_heightmap_t, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_scale(hm: *mut TCOD_heightmap_t, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_clamp(hm: *mut TCOD_heightmap_t, min: f32,
                                max: f32);
}
extern "C" {
    pub fn TCOD_heightmap_normalize(hm: *mut TCOD_heightmap_t, min: f32,
                                    max: f32);
}
extern "C" {
    pub fn TCOD_heightmap_clear(hm: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_lerp_hm(hm1: *const TCOD_heightmap_t,
                                  hm2: *const TCOD_heightmap_t,
                                  hmres: *mut TCOD_heightmap_t, coef: f32);
}
extern "C" {
    pub fn TCOD_heightmap_add_hm(hm1: *const TCOD_heightmap_t,
                                 hm2: *const TCOD_heightmap_t,
                                 hmres: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_multiply_hm(hm1: *const TCOD_heightmap_t,
                                      hm2: *const TCOD_heightmap_t,
                                      hmres: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_add_hill(hm: *mut TCOD_heightmap_t, hx: f32,
                                   hy: f32, hradius: f32, hheight: f32);
}
extern "C" {
    pub fn TCOD_heightmap_dig_hill(hm: *mut TCOD_heightmap_t, hx: f32,
                                   hy: f32, hradius: f32, hheight: f32);
}
extern "C" {
    pub fn TCOD_heightmap_dig_bezier(hm: *mut TCOD_heightmap_t,
                                     px: *mut ::std::os::raw::c_int,
                                     py: *mut ::std::os::raw::c_int,
                                     startRadius: f32, startDepth: f32,
                                     endRadius: f32, endDepth: f32);
}
extern "C" {
    pub fn TCOD_heightmap_rain_erosion(hm: *mut TCOD_heightmap_t,
                                       nbDrops: ::std::os::raw::c_int,
                                       erosionCoef: f32,
                                       sedimentationCoef: f32,
                                       rnd: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_heightmap_kernel_transform(hm: *mut TCOD_heightmap_t,
                                           kernelsize: ::std::os::raw::c_int,
                                           dx: *const ::std::os::raw::c_int,
                                           dy: *const ::std::os::raw::c_int,
                                           weight: *const f32, minLevel: f32,
                                           maxLevel: f32);
}
extern "C" {
    pub fn TCOD_heightmap_add_voronoi(hm: *mut TCOD_heightmap_t,
                                      nbPoints: ::std::os::raw::c_int,
                                      nbCoef: ::std::os::raw::c_int,
                                      coef: *const f32, rnd: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_heightmap_mid_point_displacement(hm: *mut TCOD_heightmap_t,
                                                 rnd: TCOD_random_t,
                                                 roughness: f32);
}
extern "C" {
    pub fn TCOD_heightmap_add_fbm(hm: *mut TCOD_heightmap_t,
                                  noise: TCOD_noise_t, mulx: f32, muly: f32,
                                  addx: f32, addy: f32, octaves: f32,
                                  delta: f32, scale: f32);
}
extern "C" {
    pub fn TCOD_heightmap_scale_fbm(hm: *mut TCOD_heightmap_t,
                                    noise: TCOD_noise_t, mulx: f32, muly: f32,
                                    addx: f32, addy: f32, octaves: f32,
                                    delta: f32, scale: f32);
}
extern "C" {
    pub fn TCOD_heightmap_islandify(hm: *mut TCOD_heightmap_t, seaLevel: f32,
                                    rnd: TCOD_random_t);
}
pub type TCOD_zip_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_zip_new() -> TCOD_zip_t;
}
extern "C" {
    pub fn TCOD_zip_delete(zip: TCOD_zip_t);
}
extern "C" {
    pub fn TCOD_zip_put_char(zip: TCOD_zip_t, val: ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_zip_put_int(zip: TCOD_zip_t, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_zip_put_float(zip: TCOD_zip_t, val: f32);
}
extern "C" {
    pub fn TCOD_zip_put_string(zip: TCOD_zip_t,
                               val: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_zip_put_color(zip: TCOD_zip_t, val: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_zip_put_image(zip: TCOD_zip_t, val: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_zip_put_console(zip: TCOD_zip_t, val: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_zip_put_data(zip: TCOD_zip_t, nbBytes: ::std::os::raw::c_int,
                             data: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_zip_get_current_bytes(zip: TCOD_zip_t) -> uint32;
}
extern "C" {
    pub fn TCOD_zip_save_to_file(zip: TCOD_zip_t,
                                 filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_load_from_file(zip: TCOD_zip_t,
                                   filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_char(zip: TCOD_zip_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_zip_get_int(zip: TCOD_zip_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_float(zip: TCOD_zip_t) -> f32;
}
extern "C" {
    pub fn TCOD_zip_get_string(zip: TCOD_zip_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_zip_get_color(zip: TCOD_zip_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_zip_get_image(zip: TCOD_zip_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_zip_get_console(zip: TCOD_zip_t) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_zip_get_data(zip: TCOD_zip_t, nbBytes: ::std::os::raw::c_int,
                             data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_remaining_bytes(zip: TCOD_zip_t) -> uint32;
}
extern "C" {
    pub fn TCOD_zip_skip_bytes(zip: TCOD_zip_t, nbBytes: uint32);
}
pub type TCOD_namegen_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_namegen_parse(filename: *const ::std::os::raw::c_char,
                              random: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_namegen_generate(name: *mut ::std::os::raw::c_char,
                                 allocate: bool_)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_namegen_generate_custom(name: *mut ::std::os::raw::c_char,
                                        rule: *mut ::std::os::raw::c_char,
                                        allocate: bool_)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_namegen_get_sets() -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_namegen_destroy();
}
pub type TCOD_text_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_text_init(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int,
                          w: ::std::os::raw::c_int, h: ::std::os::raw::c_int,
                          max_chars: ::std::os::raw::c_int) -> TCOD_text_t;
}
extern "C" {
    pub fn TCOD_text_init2(w: ::std::os::raw::c_int, h: ::std::os::raw::c_int,
                           max_chars: ::std::os::raw::c_int) -> TCOD_text_t;
}
extern "C" {
    pub fn TCOD_text_set_pos(txt: TCOD_text_t, x: ::std::os::raw::c_int,
                             y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_text_set_properties(txt: TCOD_text_t,
                                    cursor_char: ::std::os::raw::c_int,
                                    blink_interval: ::std::os::raw::c_int,
                                    prompt: *const ::std::os::raw::c_char,
                                    tab_size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_text_set_colors(txt: TCOD_text_t, fore: TCOD_color_t,
                                back: TCOD_color_t, back_transparency: f32);
}
extern "C" {
    pub fn TCOD_text_update(txt: TCOD_text_t, key: TCOD_key_t) -> bool_;
}
extern "C" {
    pub fn TCOD_text_render(txt: TCOD_text_t, con: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_text_get(txt: TCOD_text_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_text_reset(txt: TCOD_text_t);
}
extern "C" {
    pub fn TCOD_text_delete(txt: TCOD_text_t);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_data {
    pub _address: u8,
}
impl Clone for __locale_data {
    fn clone(&self) -> Self { *self }
}
